{
  "version": 3,
  "sources": ["../../src/controllers/user.ts"],
  "sourcesContent": ["import {Request, Response} from \"express\";\nimport {celebrate, Joi, Segments} from \"celebrate\";\nimport {generateJWT} from \"../crypto/jwt\";\n\n/**\n * POST /api/v1/user/issue\n */\nexport const issue = [\n    celebrate({\n        [Segments.BODY]: Joi.object({\n            address: Joi.string().required(),\n        }),\n    }),\n    async (req: Request, res: Response) => {\n        const jwt = await generateJWT(req.body.address);\n        res.status(200).send({token: jwt});\n    }\n];\n\nexport const mock_issue = [\n    async (req: Request, res: Response) => {\n        const vitalikETH = \"0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B\";\n        const jwt = await generateJWT(vitalikETH);\n        res.status(200).send({token: jwt});\n    }\n];\n// /**\n//  * Sign in using username and password and returns JWT\n//  */\n// exports.postLogin = async(req, res, next) => {\n//     req.assert(\"username\", \"Username is not valid\").notEmpty();\n//     req.assert(\"password\", \"Password cannot be blank\").notEmpty();\n//\n//     const errors = req.validationErrors();\n//\n//     if (errors) {\n//         return res.status(400).json({errors: errors});\n//     }\n//\n//     passport.authenticate(\"local\", (err, user, info) => {\n//         if (err) {\n//             return handleResponse(res, 400, {error: err});\n//         }\n//         if (user) {\n//             handleResponse(res, 200, user.getUser());\n//         }\n//     })(req, res, next);\n// };\n//\n// /**\n//  * POST /signup\n//  * Create a new local account\n//  */\n// exports.postSignup = async(req, res, next) => {\n//     req.assert(\"username\", \"Username is not valid\").notEmpty();\n//     req.assert(\"password\", \"Password must be at least 4 characters long\").len(4);\n//     req\n//         .assert(\"confirmPassword\", \"Passwords do not match\")\n//         .equals(req.body.password);\n//\n//     const errors = req.validationErrors();\n//\n//     if (errors) {\n//         return res.status(400).json({errors: errors});\n//     }\n//\n//     try {\n//         const user = await User.query()\n//             .allowInsert(\"[username, password]\")\n//             .insert({\n//                 username: req.body.username,\n//                 password: req.body.password\n//             });\n//     } catch (err) {\n//         errorHandler(err, res);\n//         return;\n//     }\n//     passport.authenticate(\"local\", (err, user, info) => {\n//         if (err) {\n//             return handleResponse(res, 400, {error: err});\n//         }\n//         if (user) {\n//             handleResponse(res, 200, user.getUser());\n//         }\n//     })(req, res, next);\n// };\n//\n// exports.getWebhook = async(req, res, next) => {\n//     passport.authenticate(\"bearer\", (err, user, info) => {\n//         if (err) {\n//             return handleResponse(res, 401, {error: err});\n//         }\n//         if (user) {\n//             handleResponse(res, 200, user.getHasuraClaims());\n//         } else {\n//             handleResponse(res, 200, {\"X-Hasura-Role\": \"anonymous\"});\n//         }\n//     })(req, res, next);\n// };\n//\n// function handleResponse(res, code, statusMsg) {\n//     res.status(code).json(statusMsg);\n// }\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,WAAAE,EAAA,eAAAC,IAAA,eAAAC,EAAAJ,GACA,IAAAK,EAAuC,qBACvCC,EAA0B,yBAKnB,MAAMJ,EAAQ,IACjB,aAAU,CACN,CAAC,WAAS,IAAI,EAAG,MAAI,OAAO,CACxB,QAAS,MAAI,OAAO,EAAE,SAAS,CACnC,CAAC,CACL,CAAC,EACD,MAAOK,EAAcC,IAAkB,CACnC,MAAMC,EAAM,QAAM,eAAYF,EAAI,KAAK,OAAO,EAC9CC,EAAI,OAAO,GAAG,EAAE,KAAK,CAAC,MAAOC,CAAG,CAAC,CACrC,CACJ,EAEaN,EAAa,CACtB,MAAOI,EAAcC,IAAkB,CAEnC,MAAMC,EAAM,QAAM,eADC,4CACqB,EACxCD,EAAI,OAAO,GAAG,EAAE,KAAK,CAAC,MAAOC,CAAG,CAAC,CACrC,CACJ",
  "names": ["user_exports", "__export", "issue", "mock_issue", "__toCommonJS", "import_celebrate", "import_jwt", "req", "res", "jwt"]
}
